// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VaultGrpcClient is the client API for VaultGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultGrpcClient interface {
	// FeedServicePipe offers a client service to a vault's feed repo.
	// The client submits requests to be executed, and the server streams feed entries and completion status.
	// The return stream remains open as long as the client stream remains open.
	FeedServicePipe(ctx context.Context, opts ...grpc.CallOption) (VaultGrpc_FeedServicePipeClient, error)
}

type vaultGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultGrpcClient(cc grpc.ClientConnInterface) VaultGrpcClient {
	return &vaultGrpcClient{cc}
}

func (c *vaultGrpcClient) FeedServicePipe(ctx context.Context, opts ...grpc.CallOption) (VaultGrpc_FeedServicePipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VaultGrpc_serviceDesc.Streams[0], "/vault.VaultGrpc/FeedServicePipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vaultGrpcFeedServicePipeClient{stream}
	return x, nil
}

type VaultGrpc_FeedServicePipeClient interface {
	Send(*FeedMsg) error
	Recv() (*FeedMsg, error)
	grpc.ClientStream
}

type vaultGrpcFeedServicePipeClient struct {
	grpc.ClientStream
}

func (x *vaultGrpcFeedServicePipeClient) Send(m *FeedMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vaultGrpcFeedServicePipeClient) Recv() (*FeedMsg, error) {
	m := new(FeedMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VaultGrpcServer is the server API for VaultGrpc service.
// All implementations must embed UnimplementedVaultGrpcServer
// for forward compatibility
type VaultGrpcServer interface {
	// FeedServicePipe offers a client service to a vault's feed repo.
	// The client submits requests to be executed, and the server streams feed entries and completion status.
	// The return stream remains open as long as the client stream remains open.
	FeedServicePipe(VaultGrpc_FeedServicePipeServer) error
	mustEmbedUnimplementedVaultGrpcServer()
}

// UnimplementedVaultGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedVaultGrpcServer struct {
}

func (UnimplementedVaultGrpcServer) FeedServicePipe(VaultGrpc_FeedServicePipeServer) error {
	return status.Errorf(codes.Unimplemented, "method FeedServicePipe not implemented")
}
func (UnimplementedVaultGrpcServer) mustEmbedUnimplementedVaultGrpcServer() {}

// UnsafeVaultGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultGrpcServer will
// result in compilation errors.
type UnsafeVaultGrpcServer interface {
	mustEmbedUnimplementedVaultGrpcServer()
}

func RegisterVaultGrpcServer(s *grpc.Server, srv VaultGrpcServer) {
	s.RegisterService(&_VaultGrpc_serviceDesc, srv)
}

func _VaultGrpc_FeedServicePipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VaultGrpcServer).FeedServicePipe(&vaultGrpcFeedServicePipeServer{stream})
}

type VaultGrpc_FeedServicePipeServer interface {
	Send(*FeedMsg) error
	Recv() (*FeedMsg, error)
	grpc.ServerStream
}

type vaultGrpcFeedServicePipeServer struct {
	grpc.ServerStream
}

func (x *vaultGrpcFeedServicePipeServer) Send(m *FeedMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vaultGrpcFeedServicePipeServer) Recv() (*FeedMsg, error) {
	m := new(FeedMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VaultGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vault.VaultGrpc",
	HandlerType: (*VaultGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FeedServicePipe",
			Handler:       _VaultGrpc_FeedServicePipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/vault.proto",
}
