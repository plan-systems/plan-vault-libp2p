// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: protos/vault.proto

package protos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Const int32

const (
	Const_ConstDefs Const = 0
	// DefaultGrpcServicePort is the TCP port number that the service VaultGrpc should run on by default.
	Const_DefaultGrpcServicePort Const = 5190
)

// Enum value maps for Const.
var (
	Const_name = map[int32]string{
		0:    "ConstDefs",
		5190: "DefaultGrpcServicePort",
	}
	Const_value = map[string]int32{
		"ConstDefs":              0,
		"DefaultGrpcServicePort": 5190,
	}
)

func (x Const) Enum() *Const {
	p := new(Const)
	*p = x
	return p
}

func (x Const) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Const) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vault_proto_enumTypes[0].Descriptor()
}

func (Const) Type() protoreflect.EnumType {
	return &file_protos_vault_proto_enumTypes[0]
}

func (x Const) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Const.Descriptor instead.
func (Const) EnumDescriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{0}
}

// FeedMsgOp tells a holder of a FeedMsg how to interpret its fields.
// The implicit context is if it's a message a server sends to a client or vice versa.
type FeedMsgOp int32

const (
	// RecvEntry delivers the next entry in a feed stream identified by FeedMsg.ReqID.
	FeedMsgOp_RecvEntry FeedMsgOp = 0
	// ReqComplete means the referenced request (via FeedMsg.ReqID) has successfully completed.
	// Other values in the FeedMsg are contextual the op that was completed.
	FeedMsgOp_ReqComplete FeedMsgOp = 1
	// ReqDiscarded means the referenced request failed and/or has been cancelled.
	// If FeedMsg.MsgData != nil, then it is a serialized ReqErr describing why it was discarded.
	// As with ReqComplete, the referenced request is now closed/complete, so the given ReqID is now available for (re)use.
	FeedMsgOp_ReqDiscarded FeedMsgOp = 3
	// RecvReqStatus is the server reporting progress for the given ReqID.
	// FeedMsg.MsgData is a serialized ReqStatus.
	FeedMsgOp_RecvReqStatus FeedMsgOp = 4
	// RecvVaultCtx contains the latest/updated "VaultCtx" token, stored in FeedMsg.MetaStr.
	// This token can be used in a future OpenFeed request to resume reading from a feed (see StreamMode).
	FeedMsgOp_RecvVaultCtx FeedMsgOp = 5
	// CancelReq tells the server to cancel/stop/close the request identified by the given ReqID.
	// Unlike all other client-to-server requests, the ReqID of this msg is not newly issued -- it refers to an existing request.
	// In response, the server sends a ReqDiscarded message containing:
	//      - ReqCanceled (if the matching ReqID was found and the associated op is now cancelled/closed)
	//      - ReqNotFound (if no matching ReqID was found)
	FeedMsgOp_CancelReq FeedMsgOp = 20
	// OpenFeed requests to open a given feed for reading or appending.
	// FeedMsg.MsgData is a serialized OpenFeedReq.
	// This ReqID of this msg used as FeedMsg.FeedID for subsequent requests that need to refer to an open feed (e.g. AppendEntry).
	// On success, the server does not send a response and either begins streaming (if it was requested) and/or awaits requests for the opened feed.
	FeedMsgOp_OpenFeed FeedMsgOp = 30
	// AppendEntry requests to append MsgCodec & MsgData to the opened feed identified by FeedMsg.FeedID (the ReqID of the OpenFeed op).
	// When this entry has been committed, a ReqComplete will be returned containing the newly assigned EntryID.
	FeedMsgOp_AppendEntry FeedMsgOp = 35
)

// Enum value maps for FeedMsgOp.
var (
	FeedMsgOp_name = map[int32]string{
		0:  "RecvEntry",
		1:  "ReqComplete",
		3:  "ReqDiscarded",
		4:  "RecvReqStatus",
		5:  "RecvVaultCtx",
		20: "CancelReq",
		30: "OpenFeed",
		35: "AppendEntry",
	}
	FeedMsgOp_value = map[string]int32{
		"RecvEntry":     0,
		"ReqComplete":   1,
		"ReqDiscarded":  3,
		"RecvReqStatus": 4,
		"RecvVaultCtx":  5,
		"CancelReq":     20,
		"OpenFeed":      30,
		"AppendEntry":   35,
	}
)

func (x FeedMsgOp) Enum() *FeedMsgOp {
	p := new(FeedMsgOp)
	*p = x
	return p
}

func (x FeedMsgOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedMsgOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vault_proto_enumTypes[1].Descriptor()
}

func (FeedMsgOp) Type() protoreflect.EnumType {
	return &file_protos_vault_proto_enumTypes[1]
}

func (x FeedMsgOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedMsgOp.Descriptor instead.
func (FeedMsgOp) EnumDescriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{1}
}

type StreamMode int32

const (
	// DontStream means the server should not stream any entries.
	// This mode is typically used by clients that only want to append entries to a feed.
	// VaultCtx and SeekEntryID are ignored.
	StreamMode_DontStream StreamMode = 0
	// FromGenesis tells the server to start streaming from the very beginning of the feed.
	// VaultCtx and SeekEntryID are ignored.
	StreamMode_FromGenesis StreamMode = 1
	// AtEntry tells the server to stream starting with SeekEntryID.
	StreamMode_AtEntry StreamMode = 4
	// AfterEntry tells the server to stream starting with the entry immediately *after* SeekEntryID.
	StreamMode_AfterEntry StreamMode = 5
	// AfterHead tells the server to resume after the latest entry in this feed.
	// VaultCtx and SeekEntryID are ignored.
	StreamMode_AfterHead StreamMode = 7
)

// Enum value maps for StreamMode.
var (
	StreamMode_name = map[int32]string{
		0: "DontStream",
		1: "FromGenesis",
		4: "AtEntry",
		5: "AfterEntry",
		7: "AfterHead",
	}
	StreamMode_value = map[string]int32{
		"DontStream":  0,
		"FromGenesis": 1,
		"AtEntry":     4,
		"AfterEntry":  5,
		"AfterHead":   7,
	}
)

func (x StreamMode) Enum() *StreamMode {
	p := new(StreamMode)
	*p = x
	return p
}

func (x StreamMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vault_proto_enumTypes[2].Descriptor()
}

func (StreamMode) Type() protoreflect.EnumType {
	return &file_protos_vault_proto_enumTypes[2]
}

func (x StreamMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMode.Descriptor instead.
func (StreamMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{2}
}

// StatusCode expresses milestones for a given feed request.
type StatusCode int32

const (
	// InfoMsg means there is no status change, other than the amplifying message in ReqStatus.Msg
	StatusCode_InfoMsg StatusCode = 0
	// WarningMsg means there is no status change, other than the warning message in ReqStatus.Msg.
	StatusCode_WarningMsg StatusCode = 1
	// Working is a flag that means that the request is actively being worked and to expect progress on the order of several seconds.
	StatusCode_Working           StatusCode = 64
	StatusCode_FindingPeers      StatusCode = 65
	StatusCode_ConnectingToPeers StatusCode = 66
	StatusCode_SearchingForFeed  StatusCode = 67
	StatusCode_TransferringFeed  StatusCode = 68
	// Stalled is a flag that means the request is in a long-term wait state of some kind with an unbounded completion time.
	// This flag can be ORed to any of the above "Working" status code values.
	StatusCode_Stalled StatusCode = 128
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:   "InfoMsg",
		1:   "WarningMsg",
		64:  "Working",
		65:  "FindingPeers",
		66:  "ConnectingToPeers",
		67:  "SearchingForFeed",
		68:  "TransferringFeed",
		128: "Stalled",
	}
	StatusCode_value = map[string]int32{
		"InfoMsg":           0,
		"WarningMsg":        1,
		"Working":           64,
		"FindingPeers":      65,
		"ConnectingToPeers": 66,
		"SearchingForFeed":  67,
		"TransferringFeed":  68,
		"Stalled":           128,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vault_proto_enumTypes[3].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_protos_vault_proto_enumTypes[3]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{3}
}

// ErrCode is used to unambiguously express common errors.
type ErrCode int32

const (
	ErrCode_NoErr                   ErrCode = 0
	ErrCode_UnnamedErr              ErrCode = 5000
	ErrCode_ReqCanceled             ErrCode = 5001
	ErrCode_InsufficientPermissions ErrCode = 5101
	ErrCode_ReqNotFound             ErrCode = 5010
	ErrCode_ReqInUse                ErrCode = 5011
	ErrCode_InvalidFeedURI          ErrCode = 5020
	ErrCode_FeedNotFound            ErrCode = 5021
	ErrCode_FeedAlreadyExists       ErrCode = 5022
	ErrCode_UnrecognizedVaultCtx    ErrCode = 5030
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:    "NoErr",
		5000: "UnnamedErr",
		5001: "ReqCanceled",
		5101: "InsufficientPermissions",
		5010: "ReqNotFound",
		5011: "ReqInUse",
		5020: "InvalidFeedURI",
		5021: "FeedNotFound",
		5022: "FeedAlreadyExists",
		5030: "UnrecognizedVaultCtx",
	}
	ErrCode_value = map[string]int32{
		"NoErr":                   0,
		"UnnamedErr":              5000,
		"ReqCanceled":             5001,
		"InsufficientPermissions": 5101,
		"ReqNotFound":             5010,
		"ReqInUse":                5011,
		"InvalidFeedURI":          5020,
		"FeedNotFound":            5021,
		"FeedAlreadyExists":       5022,
		"UnrecognizedVaultCtx":    5030,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_vault_proto_enumTypes[4].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_protos_vault_proto_enumTypes[4]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{4}
}

// FeedMsg is the generalized response object a server sends to the client as it processes each FeedReq sent by the client.
type FeedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MsOp tells the client how to interpret the fields in this FeedMsg.
	MsgOp FeedMsgOp `protobuf:"varint,1,opt,name=MsgOp,proto3,enum=vault.FeedMsgOp" json:"MsgOp,omitempty"`
	// ReqID is set to value the originating FeedReq.ReqID was set to.
	ReqID int32 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// FeedID is used for a client request that needs to specify an open feed (e.g. AppendEntry).
	// When set, this is the ReqID of the original OpenFeed request that opened the feed.
	FeedID int32 `protobuf:"varint,3,opt,name=FeedID,proto3" json:"FeedID,omitempty"`
	// MetaStr is a multi-purpose field used to communicate meta information -- varies per FeedMsgOp.
	MetaStr string `protobuf:"bytes,4,opt,name=MetaStr,proto3" json:"MetaStr,omitempty"`
	// MsgData is a multi-purpose content buffer that is contextual to each FeedMsgOp.
	MsgData []byte `protobuf:"bytes,5,opt,name=MsgData,proto3" json:"MsgData,omitempty"`
	// MsgCodec specifies the type and encoding of FeedMsg.MsgData.
	// FeedMsg.MsgData & MsgCodec originate from a client via FeedReqOp.AppendEntry.
	// Note: negative values are reserved for feed infrastructure internal use and can be ignored by the client.
	MsgCodec int32 `protobuf:"varint,10,opt,name=MsgCodec,proto3" json:"MsgCodec,omitempty"`
	// EntryID identifies a particular entry in this feed during this session.
	EntryID int64 `protobuf:"varint,12,opt,name=EntryID,proto3" json:"EntryID,omitempty"`
}

func (x *FeedMsg) Reset() {
	*x = FeedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vault_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMsg) ProtoMessage() {}

func (x *FeedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vault_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMsg.ProtoReflect.Descriptor instead.
func (*FeedMsg) Descriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{0}
}

func (x *FeedMsg) GetMsgOp() FeedMsgOp {
	if x != nil {
		return x.MsgOp
	}
	return FeedMsgOp_RecvEntry
}

func (x *FeedMsg) GetReqID() int32 {
	if x != nil {
		return x.ReqID
	}
	return 0
}

func (x *FeedMsg) GetFeedID() int32 {
	if x != nil {
		return x.FeedID
	}
	return 0
}

func (x *FeedMsg) GetMetaStr() string {
	if x != nil {
		return x.MetaStr
	}
	return ""
}

func (x *FeedMsg) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *FeedMsg) GetMsgCodec() int32 {
	if x != nil {
		return x.MsgCodec
	}
	return 0
}

func (x *FeedMsg) GetEntryID() int64 {
	if x != nil {
		return x.EntryID
	}
	return 0
}

type OpenFeedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeedURI is the feed name to be opened.
	// A feed URI a case-sensitive, UTF8, POSIX-style pathname with no leading or trailing slashes.
	FeedURI string `protobuf:"bytes,1,opt,name=FeedURI,proto3" json:"FeedURI,omitempty"`
	// StreamMode specifies if and where the server should start streaming feed entries.
	StreamMode StreamMode `protobuf:"varint,3,opt,name=StreamMode,proto3,enum=vault.StreamMode" json:"StreamMode,omitempty"`
	// VaultCtx provides context for SeekEntryID -- see StreamMode.
	VaultCtx string `protobuf:"bytes,5,opt,name=VaultCtx,proto3" json:"VaultCtx,omitempty"`
	// SeekEntryID tells the server where to start streaming.
	SeekEntryID int64 `protobuf:"varint,6,opt,name=SeekEntryID,proto3" json:"SeekEntryID,omitempty"`
	// MaxEntriesToSend limits the number of entries the server will stream.
	// If 0, then no limit is set.
	MaxEntriesToSend int32 `protobuf:"varint,7,opt,name=MaxEntriesToSend,proto3" json:"MaxEntriesToSend,omitempty"`
	// SendEntryIDsOnly tells the server to only send EntryIDs (MsgData and MsgCodec will be nil)
	SendEntryIDsOnly bool `protobuf:"varint,8,opt,name=SendEntryIDsOnly,proto3" json:"SendEntryIDsOnly,omitempty"`
	// GenesisEntry signals to create a new feed.
	// If non-nil, FeedURI should be created and this entry should be the first entry appended to it.
	GenesisEntry *FeedMsg `protobuf:"bytes,10,opt,name=GenesisEntry,proto3" json:"GenesisEntry,omitempty"`
}

func (x *OpenFeedReq) Reset() {
	*x = OpenFeedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vault_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFeedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFeedReq) ProtoMessage() {}

func (x *OpenFeedReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vault_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFeedReq.ProtoReflect.Descriptor instead.
func (*OpenFeedReq) Descriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{1}
}

func (x *OpenFeedReq) GetFeedURI() string {
	if x != nil {
		return x.FeedURI
	}
	return ""
}

func (x *OpenFeedReq) GetStreamMode() StreamMode {
	if x != nil {
		return x.StreamMode
	}
	return StreamMode_DontStream
}

func (x *OpenFeedReq) GetVaultCtx() string {
	if x != nil {
		return x.VaultCtx
	}
	return ""
}

func (x *OpenFeedReq) GetSeekEntryID() int64 {
	if x != nil {
		return x.SeekEntryID
	}
	return 0
}

func (x *OpenFeedReq) GetMaxEntriesToSend() int32 {
	if x != nil {
		return x.MaxEntriesToSend
	}
	return 0
}

func (x *OpenFeedReq) GetSendEntryIDsOnly() bool {
	if x != nil {
		return x.SendEntryIDsOnly
	}
	return false
}

func (x *OpenFeedReq) GetGenesisEntry() *FeedMsg {
	if x != nil {
		return x.GenesisEntry
	}
	return nil
}

// ReqStatus is used in conjunction with FeedMsgOp.StatusUpdate and expresses milestones for a given client request.
type ReqStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ReqID is feed request ID that this update is reporting about.
	ReqID int32 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// Code describes the status of ReqID.
	Code StatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=vault.StatusCode" json:"Code,omitempty"`
	// Msg is an optional human-readable message describing the current status of a request.
	Msg string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
	// If applicable this is a relevant entry ID.
	EntryID int64 `protobuf:"varint,4,opt,name=EntryID,proto3" json:"EntryID,omitempty"`
	// If greater than zero, these are estimates of the work or time remaining.
	BytesRemaining int64 `protobuf:"varint,10,opt,name=BytesRemaining,proto3" json:"BytesRemaining,omitempty"`
	SecsRemaining  int64 `protobuf:"varint,11,opt,name=SecsRemaining,proto3" json:"SecsRemaining,omitempty"`
}

func (x *ReqStatus) Reset() {
	*x = ReqStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vault_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStatus) ProtoMessage() {}

func (x *ReqStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vault_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStatus.ProtoReflect.Descriptor instead.
func (*ReqStatus) Descriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{2}
}

func (x *ReqStatus) GetReqID() int32 {
	if x != nil {
		return x.ReqID
	}
	return 0
}

func (x *ReqStatus) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_InfoMsg
}

func (x *ReqStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReqStatus) GetEntryID() int64 {
	if x != nil {
		return x.EntryID
	}
	return 0
}

func (x *ReqStatus) GetBytesRemaining() int64 {
	if x != nil {
		return x.BytesRemaining
	}
	return 0
}

func (x *ReqStatus) GetSecsRemaining() int64 {
	if x != nil {
		return x.SecsRemaining
	}
	return 0
}

// ReqErr wraps any error and is typically used in conjunction with FeedMsgOp.ReqDiscarded
type ReqErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrCode `protobuf:"varint,1,opt,name=Code,proto3,enum=vault.ErrCode" json:"Code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *ReqErr) Reset() {
	*x = ReqErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_vault_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqErr) ProtoMessage() {}

func (x *ReqErr) ProtoReflect() protoreflect.Message {
	mi := &file_protos_vault_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqErr.ProtoReflect.Descriptor instead.
func (*ReqErr) Descriptor() ([]byte, []int) {
	return file_protos_vault_proto_rawDescGZIP(), []int{3}
}

func (x *ReqErr) GetCode() ErrCode {
	if x != nil {
		return x.Code
	}
	return ErrCode_NoErr
}

func (x *ReqErr) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_protos_vault_proto protoreflect.FileDescriptor

var file_protos_vault_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x07,
	0x46, 0x65, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x4f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x65, 0x65, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x64, 0x55,
	0x52, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x65, 0x65, 0x64, 0x55, 0x52,
	0x49, 0x12, 0x31, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x74, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x74, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4d, 0x61,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xc2,
	0x01, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x65, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x45, 0x72, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x2a, 0x33, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x66, 0x73, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x16, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x10, 0xc6, 0x28, 0x2a, 0x90, 0x01, 0x0a, 0x09, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x76, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x74, 0x78, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x23, 0x2a, 0x59, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x6f, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x10, 0x07, 0x2a, 0x99, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x40, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x10,
	0x41, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x50, 0x65, 0x65, 0x72, 0x73, 0x10, 0x42, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x10, 0x43, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x64, 0x10, 0x44, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10,
	0x80, 0x01, 0x2a, 0xd1, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0a, 0x55, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x45, 0x72, 0x72, 0x10, 0x88, 0x27, 0x12, 0x10, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x89, 0x27, 0x12, 0x1c, 0x0a, 0x17,
	0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xed, 0x27, 0x12, 0x10, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x92, 0x27, 0x12, 0x0d, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x10, 0x93, 0x27, 0x12, 0x13, 0x0a, 0x0e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x55, 0x52, 0x49, 0x10, 0x9c, 0x27,
	0x12, 0x11, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x9d, 0x27, 0x12, 0x16, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x9e, 0x27, 0x12, 0x19, 0x0a, 0x14, 0x55,
	0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x74, 0x78, 0x10, 0xa6, 0x27, 0x32, 0x42, 0x0a, 0x09, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x70, 0x63, 0x12, 0x35, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x69, 0x70, 0x65, 0x12, 0x0e, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x28, 0x01, 0x30, 0x01, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_vault_proto_rawDescOnce sync.Once
	file_protos_vault_proto_rawDescData = file_protos_vault_proto_rawDesc
)

func file_protos_vault_proto_rawDescGZIP() []byte {
	file_protos_vault_proto_rawDescOnce.Do(func() {
		file_protos_vault_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_vault_proto_rawDescData)
	})
	return file_protos_vault_proto_rawDescData
}

var file_protos_vault_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protos_vault_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_protos_vault_proto_goTypes = []interface{}{
	(Const)(0),          // 0: vault.Const
	(FeedMsgOp)(0),      // 1: vault.FeedMsgOp
	(StreamMode)(0),     // 2: vault.StreamMode
	(StatusCode)(0),     // 3: vault.StatusCode
	(ErrCode)(0),        // 4: vault.ErrCode
	(*FeedMsg)(nil),     // 5: vault.FeedMsg
	(*OpenFeedReq)(nil), // 6: vault.OpenFeedReq
	(*ReqStatus)(nil),   // 7: vault.ReqStatus
	(*ReqErr)(nil),      // 8: vault.ReqErr
}
var file_protos_vault_proto_depIdxs = []int32{
	1, // 0: vault.FeedMsg.MsgOp:type_name -> vault.FeedMsgOp
	2, // 1: vault.OpenFeedReq.StreamMode:type_name -> vault.StreamMode
	5, // 2: vault.OpenFeedReq.GenesisEntry:type_name -> vault.FeedMsg
	3, // 3: vault.ReqStatus.Code:type_name -> vault.StatusCode
	4, // 4: vault.ReqErr.Code:type_name -> vault.ErrCode
	5, // 5: vault.VaultGrpc.FeedServicePipe:input_type -> vault.FeedMsg
	5, // 6: vault.VaultGrpc.FeedServicePipe:output_type -> vault.FeedMsg
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_protos_vault_proto_init() }
func file_protos_vault_proto_init() {
	if File_protos_vault_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_vault_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vault_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFeedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vault_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_vault_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_vault_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_vault_proto_goTypes,
		DependencyIndexes: file_protos_vault_proto_depIdxs,
		EnumInfos:         file_protos_vault_proto_enumTypes,
		MessageInfos:      file_protos_vault_proto_msgTypes,
	}.Build()
	File_protos_vault_proto = out.File
	file_protos_vault_proto_rawDesc = nil
	file_protos_vault_proto_goTypes = nil
	file_protos_vault_proto_depIdxs = nil
}
